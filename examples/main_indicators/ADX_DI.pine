//@version=5
// PCC Sunday Trade Series
// BLOCK - Prince of Songkla University, Phuket, Thailand
// Author: Tanwa Arpornthip
// Contact: tanwa.a@phuket.psu.ac.th
// 2021-09-25

strategy("PCC ADX / DI", overlay=true, default_qty_type=strategy.percent_of_equity, 
  default_qty_value=100, commission_type=strategy.commission.percent, commission_value=0, 
  pyramiding=0, calc_on_order_fills=false, precision=7, calc_on_every_tick=true)

// === STRATEGY PARAMETERS ===
// === With inputs
want_long = input.bool(title="Long order?", defval=true)
want_short = input.bool(title="Short order?", defval=true)
tp_atr = input.float(title="x ATR TP", defval=1.0, minval=0)
sl_atr = input.float(title="x ATR SL", defval=1.0, minval=0)
atr_range = input.int(title="ATR period", defval=14)

direction = input.string(title="Direction", defval="Conventional", options=["Contrarian", "Conventional"])

// === Without inputs
average_true_range = ta.atr(atr_range)

// === INPUT BACKTEST RANGE ===
FromYear = input.int(defval=2017, title="From Year", minval=2000)
ToYear = input.int(defval=9999, title="To Year", minval=2000)
FromMonth = input.int(defval=1, title="From Month", minval=1, maxval=12)
ToMonth = input.int(defval=1, title="To Month", minval=1, maxval=12)
FromDay = input.int(defval=1, title="From Day", minval=1, maxval=31)
ToDay = input.int(defval=31, title="To Day", minval=1, maxval=31)

// === Initializing some variables
stop_loss_level = float(na)
take_profit_level = float(na)
short_condition = false
long_condition = false


////////////////////////////////
// Ignore this part for now   //
//â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡â¬‡// 

long_confirm = true
short_confirm = true

long_volume = true
short_volume = true

//â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†â¬†// 
// Ignore this part for now  //
///////////////////////////////

// === Define useful functions ===
start = timestamp(FromYear, FromMonth, FromDay, 00, 00)  // backtest start window
finish = timestamp(ToYear, ToMonth, ToDay, 23, 59)  // backtest finish window
window() =>  // create function "within window of time"
    time >= start and time <= finish ? true : false


// =======================================//
//       USER CHANGEABLE SECTION          // 
// =======================================//

adxThresh = input.int(title="ADX Strong Trend Threshold", defval=25)
adxSmoothing = input.int(14, title="ADX Smoothing Period", minval=1, maxval=50)
diPeriod = input.int(14, minval=1, title="DI Length")

up = ta.change(high)
down = -ta.change(low)
plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = ta.rma(ta.tr, diPeriod)
plus = fixnan(100 * ta.rma(plusDM, diPeriod) / trur)
minus = fixnan(100 * ta.rma(minusDM, diPeriod) / trur)
sum = plus + minus
adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxSmoothing)

//// defining buy/sell signal ////
buySignal = ta.crossover(plus, minus) and adx >= adxThresh
sellSignal = ta.crossunder(plus, minus) and adx >= adxThresh


// Define long condition and short condition
// Direction is defined by an input on the UI
if direction == "Conventional"
    // Conventional means using the indicator traditionally (i.e. the same way stock market does)
    // Define long condition and short condition
    short_condition := sellSignal
    long_condition := buySignal
else
    // Non-conventional (contrarian) means doing things oppositely
    short_condition := buySignal
    long_condition := sellSignal




// End of user changeable section
// ================================




// Order entering
strategy.entry("Long", strategy.long, when=long_condition and long_confirm and long_volume and want_long and window() and strategy.position_size == 0)
strategy.entry("Short", strategy.short, when=short_condition and short_confirm and short_volume and want_short and window() and strategy.position_size == 0)

// Risk management
bought = (long_condition[1] or short_condition[1]) and 
   math.abs(strategy.position_size[0]) > math.abs(strategy.position_size[1])
since_entry = ta.barssince(bought)
if strategy.position_size != 0
    if strategy.position_size > 0
        //Going long. Do these
        stop_loss_level := strategy.position_avg_price - sl_atr * average_true_range[since_entry]
        take_profit_level := strategy.position_avg_price + tp_atr * average_true_range[since_entry]
        take_profit_level
    else
        //Going short. Do these
        stop_loss_level := strategy.position_avg_price + sl_atr * average_true_range[since_entry]
        take_profit_level := strategy.position_avg_price - tp_atr * average_true_range[since_entry]
        take_profit_level
else
    if strategy.position_size[1] != 0
        //Plot one more bar for the order closing bar
        stop_loss_level := stop_loss_level[1]
        take_profit_level := take_profit_level[1]
        take_profit_level
    else
        //With no order and not a closing bar. Plot nothing
        stop_loss_level := na
        take_profit_level := na
        take_profit_level

strategy.exit("LongClose", "Long", stop=stop_loss_level, limit=take_profit_level)
strategy.exit("ShortClose", "Short", stop=stop_loss_level, limit=take_profit_level)
strategy.close_all(when=time > finish)

plotchar(long_condition? 1:0, char="ðŸŸ¢")
plotchar(short_condition? 1:0, char="ðŸ”´")
plot(stop_loss_level, style=plot.style_linebr, color=color.red)
plot(take_profit_level, style=plot.style_linebr, color=color.green)
//plot(strategy.position_size)